// Code generated by Fern. DO NOT EDIT.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v3/internal"
)

type AddThreadMessagesRequest struct {
	// Optional list of role types to ignore when adding messages to graph memory.
	// The message itself will still be added, retained and used as context for messages
	// that are added to a user's graph.
	IgnoreRoles []RoleType `json:"ignore_roles,omitempty" url:"-"`
	// A list of message objects, where each message contains a role and content.
	Messages []*Message `json:"messages,omitempty" url:"-"`
	// Optionally return memory context relevant to the most recent messages.
	ReturnContext *bool `json:"return_context,omitempty" url:"-"`
}

type CreateThreadRequest struct {
	// The unique identifier of the thread.
	ThreadID string `json:"thread_id" url:"-"`
	// The unique identifier of the user associated with the thread
	UserID string `json:"user_id" url:"-"`
}

type ThreadGetRequest struct {
	// Limit the number of results returned
	Limit *int `json:"-" url:"limit,omitempty"`
	// Cursor for pagination
	Cursor *int `json:"-" url:"cursor,omitempty"`
	// Number of most recent messages to return (overrides limit and cursor)
	Lastn *int `json:"-" url:"lastn,omitempty"`
}

type ThreadGetUserContextRequest struct {
	// The minimum rating by which to filter relevant facts.
	MinRating *float64 `json:"-" url:"minRating,omitempty"`
	// Defaults to summary mode. Use basic for lower latency
	Mode *ThreadGetUserContextRequestMode `json:"-" url:"mode,omitempty"`
}

type ThreadListAllRequest struct {
	// Page number for pagination, starting from 1
	PageNumber *int `json:"-" url:"page_number,omitempty"`
	// Number of threads to retrieve per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Field to order the results by: created_at, updated_at, user_id, thread_id.
	OrderBy *string `json:"-" url:"order_by,omitempty"`
	// Order direction: true for ascending, false for descending.
	Asc *bool `json:"-" url:"asc,omitempty"`
}

type AddThreadMessagesResponse struct {
	Context *string `json:"context,omitempty" url:"context,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddThreadMessagesResponse) GetContext() *string {
	if a == nil {
		return nil
	}
	return a.Context
}

func (a *AddThreadMessagesResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddThreadMessagesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddThreadMessagesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddThreadMessagesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddThreadMessagesResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Message struct {
	// The content of the message.
	Content string `json:"content" url:"content"`
	// The timestamp of when the message was created.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// Customizable name of the sender of the message (e.g., "john", "sales_agent").
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether the message has been processed.
	Processed *bool `json:"processed,omitempty" url:"processed,omitempty"`
	// The role of message sender (e.g., "user", "system").
	Role RoleType `json:"role" url:"role"`
	// The unique identifier of the message.
	UUID *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Message) GetContent() string {
	if m == nil {
		return ""
	}
	return m.Content
}

func (m *Message) GetCreatedAt() *string {
	if m == nil {
		return nil
	}
	return m.CreatedAt
}

func (m *Message) GetName() *string {
	if m == nil {
		return nil
	}
	return m.Name
}

func (m *Message) GetProcessed() *bool {
	if m == nil {
		return nil
	}
	return m.Processed
}

func (m *Message) GetRole() RoleType {
	if m == nil {
		return ""
	}
	return m.Role
}

func (m *Message) GetUUID() *string {
	if m == nil {
		return nil
	}
	return m.UUID
}

func (m *Message) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Message) UnmarshalJSON(data []byte) error {
	type unmarshaler Message
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Message(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Message) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageListResponse struct {
	// A list of message objects.
	Messages []*Message `json:"messages,omitempty" url:"messages,omitempty"`
	// The number of messages returned.
	RowCount *int `json:"row_count,omitempty" url:"row_count,omitempty"`
	// The total number of messages.
	TotalCount *int `json:"total_count,omitempty" url:"total_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageListResponse) GetMessages() []*Message {
	if m == nil {
		return nil
	}
	return m.Messages
}

func (m *MessageListResponse) GetRowCount() *int {
	if m == nil {
		return nil
	}
	return m.RowCount
}

func (m *MessageListResponse) GetTotalCount() *int {
	if m == nil {
		return nil
	}
	return m.TotalCount
}

func (m *MessageListResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageListResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ThreadContextResponse struct {
	// Memory context containing relevant facts and entities for the session. Can be put into the prompt directly.
	Context *string `json:"context,omitempty" url:"context,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreadContextResponse) GetContext() *string {
	if t == nil {
		return nil
	}
	return t.Context
}

func (t *ThreadContextResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreadContextResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreadContextResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreadContextResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreadContextResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreadListResponse struct {
	ResponseCount *int      `json:"response_count,omitempty" url:"response_count,omitempty"`
	Threads       []*Thread `json:"threads,omitempty" url:"threads,omitempty"`
	TotalCount    *int      `json:"total_count,omitempty" url:"total_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThreadListResponse) GetResponseCount() *int {
	if t == nil {
		return nil
	}
	return t.ResponseCount
}

func (t *ThreadListResponse) GetThreads() []*Thread {
	if t == nil {
		return nil
	}
	return t.Threads
}

func (t *ThreadListResponse) GetTotalCount() *int {
	if t == nil {
		return nil
	}
	return t.TotalCount
}

func (t *ThreadListResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThreadListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThreadListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThreadListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThreadListResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThreadGetUserContextRequestMode string

const (
	ThreadGetUserContextRequestModeBasic   ThreadGetUserContextRequestMode = "basic"
	ThreadGetUserContextRequestModeSummary ThreadGetUserContextRequestMode = "summary"
)

func NewThreadGetUserContextRequestModeFromString(s string) (ThreadGetUserContextRequestMode, error) {
	switch s {
	case "basic":
		return ThreadGetUserContextRequestModeBasic, nil
	case "summary":
		return ThreadGetUserContextRequestModeSummary, nil
	}
	var t ThreadGetUserContextRequestMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t ThreadGetUserContextRequestMode) Ptr() *ThreadGetUserContextRequestMode {
	return &t
}
