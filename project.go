// Code generated by Fern. DO NOT EDIT.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v3/internal"
)

type ApidataProjectInfoResponse struct {
	Project *ProjectInfo `json:"project,omitempty" url:"project,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataProjectInfoResponse) GetProject() *ProjectInfo {
	if a == nil {
		return nil
	}
	return a.Project
}

func (a *ApidataProjectInfoResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataProjectInfoResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataProjectInfoResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataProjectInfoResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataProjectInfoResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ProjectInfo struct {
	CreatedAt   *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	UUID        *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectInfo) GetCreatedAt() *string {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *ProjectInfo) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *ProjectInfo) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *ProjectInfo) GetUUID() *string {
	if p == nil {
		return nil
	}
	return p.UUID
}

func (p *ProjectInfo) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectInfo) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
