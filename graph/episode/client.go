// Code generated by Fern. DO NOT EDIT.

package episode

import (
	context "context"
	v3 "github.com/getzep/zep-go/v3"
	core "github.com/getzep/zep-go/v3/core"
	graph "github.com/getzep/zep-go/v3/graph"
	internal "github.com/getzep/zep-go/v3/internal"
	option "github.com/getzep/zep-go/v3/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("ZEP_API_KEY")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns episodes by graph id.
func (c *Client) GetByGraphID(
	ctx context.Context,
	// Graph ID
	graphID string,
	request *graph.EpisodeGetByGraphIDRequest,
	opts ...option.RequestOption,
) (*v3.EpisodeResponse, error) {
	response, err := c.WithRawResponse.GetByGraphID(
		ctx,
		graphID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns episodes by user id.
func (c *Client) GetByUserID(
	ctx context.Context,
	// User ID
	userID string,
	request *graph.EpisodeGetByUserIDRequest,
	opts ...option.RequestOption,
) (*v3.EpisodeResponse, error) {
	response, err := c.WithRawResponse.GetByUserID(
		ctx,
		userID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns episodes by UUID
func (c *Client) Get(
	ctx context.Context,
	// Episode UUID
	uuid string,
	opts ...option.RequestOption,
) (*v3.Episode, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		uuid,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes an episode by its UUID.
func (c *Client) Delete(
	ctx context.Context,
	// Episode UUID
	uuid string,
	opts ...option.RequestOption,
) (*v3.SuccessResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		uuid,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns nodes and edges mentioned in an episode
func (c *Client) GetNodesAndEdges(
	ctx context.Context,
	// Episode uuid
	uuid string,
	opts ...option.RequestOption,
) (*v3.EpisodeMentions, error) {
	response, err := c.WithRawResponse.GetNodesAndEdges(
		ctx,
		uuid,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
