// Code generated by Fern. DO NOT EDIT.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v3/internal"
)

type CreateUserRequest struct {
	// The email address of the user.
	Email *string `json:"email,omitempty" url:"-"`
	// Optional instruction to use for fact rating.
	FactRatingInstruction *FactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"-"`
	// The first name of the user.
	FirstName *string `json:"first_name,omitempty" url:"-"`
	// The last name of the user.
	LastName *string `json:"last_name,omitempty" url:"-"`
	// The metadata associated with the user.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
	// The unique identifier of the user.
	UserID string `json:"user_id" url:"-"`
}

type UserListOrderedRequest struct {
	// Page number for pagination, starting from 1
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
	// Number of users to retrieve per page
	PageSize *int `json:"-" url:"pageSize,omitempty"`
}

type Fact struct {
	Content   string  `json:"content" url:"content"`
	CreatedAt string  `json:"created_at" url:"created_at"`
	ExpiredAt *string `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	// Deprecated
	Fact           string   `json:"fact" url:"fact"`
	InvalidAt      *string  `json:"invalid_at,omitempty" url:"invalid_at,omitempty"`
	Name           *string  `json:"name,omitempty" url:"name,omitempty"`
	Rating         *float64 `json:"rating,omitempty" url:"rating,omitempty"`
	SourceNodeName *string  `json:"source_node_name,omitempty" url:"source_node_name,omitempty"`
	TargetNodeName *string  `json:"target_node_name,omitempty" url:"target_node_name,omitempty"`
	UUID           string   `json:"uuid" url:"uuid"`
	ValidAt        *string  `json:"valid_at,omitempty" url:"valid_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *Fact) GetContent() string {
	if f == nil {
		return ""
	}
	return f.Content
}

func (f *Fact) GetCreatedAt() string {
	if f == nil {
		return ""
	}
	return f.CreatedAt
}

func (f *Fact) GetExpiredAt() *string {
	if f == nil {
		return nil
	}
	return f.ExpiredAt
}

func (f *Fact) GetFact() string {
	if f == nil {
		return ""
	}
	return f.Fact
}

func (f *Fact) GetInvalidAt() *string {
	if f == nil {
		return nil
	}
	return f.InvalidAt
}

func (f *Fact) GetName() *string {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *Fact) GetRating() *float64 {
	if f == nil {
		return nil
	}
	return f.Rating
}

func (f *Fact) GetSourceNodeName() *string {
	if f == nil {
		return nil
	}
	return f.SourceNodeName
}

func (f *Fact) GetTargetNodeName() *string {
	if f == nil {
		return nil
	}
	return f.TargetNodeName
}

func (f *Fact) GetUUID() string {
	if f == nil {
		return ""
	}
	return f.UUID
}

func (f *Fact) GetValidAt() *string {
	if f == nil {
		return nil
	}
	return f.ValidAt
}

func (f *Fact) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *Fact) UnmarshalJSON(data []byte) error {
	type unmarshaler Fact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Fact(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *Fact) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FactsResponse struct {
	Facts []*Fact `json:"facts,omitempty" url:"facts,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FactsResponse) GetFacts() []*Fact {
	if f == nil {
		return nil
	}
	return f.Facts
}

func (f *FactsResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FactsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FactsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FactsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FactsResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type User struct {
	CreatedAt             *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	DeletedAt             *string                `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email                 *string                `json:"email,omitempty" url:"email,omitempty"`
	FactRatingInstruction *FactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"fact_rating_instruction,omitempty"`
	FirstName             *string                `json:"first_name,omitempty" url:"first_name,omitempty"`
	ID                    *int                   `json:"id,omitempty" url:"id,omitempty"`
	LastName              *string                `json:"last_name,omitempty" url:"last_name,omitempty"`
	// Deprecated
	Metadata    map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	ProjectUUID *string                `json:"project_uuid,omitempty" url:"project_uuid,omitempty"`
	// Deprecated
	SessionCount *int `json:"session_count,omitempty" url:"session_count,omitempty"`
	// Deprecated
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UserID    *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	UUID      *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetCreatedAt() *string {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *User) GetDeletedAt() *string {
	if u == nil {
		return nil
	}
	return u.DeletedAt
}

func (u *User) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *User) GetFactRatingInstruction() *FactRatingInstruction {
	if u == nil {
		return nil
	}
	return u.FactRatingInstruction
}

func (u *User) GetFirstName() *string {
	if u == nil {
		return nil
	}
	return u.FirstName
}

func (u *User) GetID() *int {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *User) GetLastName() *string {
	if u == nil {
		return nil
	}
	return u.LastName
}

func (u *User) GetMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Metadata
}

func (u *User) GetProjectUUID() *string {
	if u == nil {
		return nil
	}
	return u.ProjectUUID
}

func (u *User) GetSessionCount() *int {
	if u == nil {
		return nil
	}
	return u.SessionCount
}

func (u *User) GetUpdatedAt() *string {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *User) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *User) GetUUID() *string {
	if u == nil {
		return nil
	}
	return u.UUID
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserListResponse struct {
	RowCount   *int    `json:"row_count,omitempty" url:"row_count,omitempty"`
	TotalCount *int    `json:"total_count,omitempty" url:"total_count,omitempty"`
	Users      []*User `json:"users,omitempty" url:"users,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserListResponse) GetRowCount() *int {
	if u == nil {
		return nil
	}
	return u.RowCount
}

func (u *UserListResponse) GetTotalCount() *int {
	if u == nil {
		return nil
	}
	return u.TotalCount
}

func (u *UserListResponse) GetUsers() []*User {
	if u == nil {
		return nil
	}
	return u.Users
}

func (u *UserListResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserListResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserNodeResponse struct {
	Node *EntityNode `json:"node,omitempty" url:"node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserNodeResponse) GetNode() *EntityNode {
	if u == nil {
		return nil
	}
	return u.Node
}

func (u *UserNodeResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserNodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserNodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserNodeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserNodeResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateUserRequest struct {
	// The email address of the user.
	Email *string `json:"email,omitempty" url:"-"`
	// Optional instruction to use for fact rating.
	FactRatingInstruction *FactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"-"`
	// The first name of the user.
	FirstName *string `json:"first_name,omitempty" url:"-"`
	// The last name of the user.
	LastName *string `json:"last_name,omitempty" url:"-"`
	// The metadata to update
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}
