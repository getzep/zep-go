// Code generated by Fern. DO NOT EDIT.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v3/internal"
)

type ApidataCreateUserRequest struct {
	// The email address of the user.
	Email *string `json:"email,omitempty" url:"-"`
	// Optional instruction to use for fact rating.
	FactRatingInstruction *ApidataFactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"-"`
	// The first name of the user.
	FirstName *string `json:"first_name,omitempty" url:"-"`
	// The last name of the user.
	LastName *string `json:"last_name,omitempty" url:"-"`
	// The metadata associated with the user.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
	// The unique identifier of the user.
	UserID string `json:"user_id" url:"-"`
}

type UserListOrderedRequest struct {
	// Page number for pagination, starting from 1
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
	// Number of users to retrieve per page
	PageSize *int `json:"-" url:"pageSize,omitempty"`
}

type ApidataFactsResponse struct {
	Facts []*ApidataFact `json:"facts,omitempty" url:"facts,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataFactsResponse) GetFacts() []*ApidataFact {
	if a == nil {
		return nil
	}
	return a.Facts
}

func (a *ApidataFactsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataFactsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataFactsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataFactsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataFactsResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataUser struct {
	CreatedAt             *string                      `json:"created_at,omitempty" url:"created_at,omitempty"`
	DeletedAt             *string                      `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email                 *string                      `json:"email,omitempty" url:"email,omitempty"`
	FactRatingInstruction *ModelsFactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"fact_rating_instruction,omitempty"`
	FirstName             *string                      `json:"first_name,omitempty" url:"first_name,omitempty"`
	ID                    *int                         `json:"id,omitempty" url:"id,omitempty"`
	LastName              *string                      `json:"last_name,omitempty" url:"last_name,omitempty"`
	// Deprecated
	Metadata    map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	ProjectUUID *string                `json:"project_uuid,omitempty" url:"project_uuid,omitempty"`
	// Deprecated
	SessionCount *int `json:"session_count,omitempty" url:"session_count,omitempty"`
	// Deprecated
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UserID    *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	UUID      *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataUser) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApidataUser) GetDeletedAt() *string {
	if a == nil {
		return nil
	}
	return a.DeletedAt
}

func (a *ApidataUser) GetEmail() *string {
	if a == nil {
		return nil
	}
	return a.Email
}

func (a *ApidataUser) GetFactRatingInstruction() *ModelsFactRatingInstruction {
	if a == nil {
		return nil
	}
	return a.FactRatingInstruction
}

func (a *ApidataUser) GetFirstName() *string {
	if a == nil {
		return nil
	}
	return a.FirstName
}

func (a *ApidataUser) GetID() *int {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ApidataUser) GetLastName() *string {
	if a == nil {
		return nil
	}
	return a.LastName
}

func (a *ApidataUser) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApidataUser) GetProjectUUID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectUUID
}

func (a *ApidataUser) GetSessionCount() *int {
	if a == nil {
		return nil
	}
	return a.SessionCount
}

func (a *ApidataUser) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ApidataUser) GetUserID() *string {
	if a == nil {
		return nil
	}
	return a.UserID
}

func (a *ApidataUser) GetUUID() *string {
	if a == nil {
		return nil
	}
	return a.UUID
}

func (a *ApidataUser) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataUser) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataUser) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataUserListResponse struct {
	RowCount   *int           `json:"row_count,omitempty" url:"row_count,omitempty"`
	TotalCount *int           `json:"total_count,omitempty" url:"total_count,omitempty"`
	Users      []*ApidataUser `json:"users,omitempty" url:"users,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataUserListResponse) GetRowCount() *int {
	if a == nil {
		return nil
	}
	return a.RowCount
}

func (a *ApidataUserListResponse) GetTotalCount() *int {
	if a == nil {
		return nil
	}
	return a.TotalCount
}

func (a *ApidataUserListResponse) GetUsers() []*ApidataUser {
	if a == nil {
		return nil
	}
	return a.Users
}

func (a *ApidataUserListResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataUserListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataUserListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataUserListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataUserListResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataUserNodeResponse struct {
	Node *GraphitiEntityNode `json:"node,omitempty" url:"node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataUserNodeResponse) GetNode() *GraphitiEntityNode {
	if a == nil {
		return nil
	}
	return a.Node
}

func (a *ApidataUserNodeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataUserNodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataUserNodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataUserNodeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataUserNodeResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ModelsFactRatingExamples struct {
	High   *string `json:"high,omitempty" url:"high,omitempty"`
	Low    *string `json:"low,omitempty" url:"low,omitempty"`
	Medium *string `json:"medium,omitempty" url:"medium,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ModelsFactRatingExamples) GetHigh() *string {
	if m == nil {
		return nil
	}
	return m.High
}

func (m *ModelsFactRatingExamples) GetLow() *string {
	if m == nil {
		return nil
	}
	return m.Low
}

func (m *ModelsFactRatingExamples) GetMedium() *string {
	if m == nil {
		return nil
	}
	return m.Medium
}

func (m *ModelsFactRatingExamples) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ModelsFactRatingExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelsFactRatingExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelsFactRatingExamples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelsFactRatingExamples) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelsFactRatingInstruction struct {
	// Examples is a list of examples that demonstrate how facts might be rated based on your instruction. You should provide
	// an example of a highly rated example, a low rated example, and a medium (or in between example). For example, if you are rating
	// based on relevance to a trip planning application, your examples might be:
	// High: "Joe's dream vacation is Bali"
	// Medium: "Joe has a fear of flying",
	// Low: "Joe's favorite food is Japanese",
	Examples *ModelsFactRatingExamples `json:"examples,omitempty" url:"examples,omitempty"`
	// A string describing how to rate facts as they apply to your application. A trip planning application may
	// use something like "relevancy to planning a trip, the user's preferences when traveling,
	// or the user's travel history."
	Instruction *string `json:"instruction,omitempty" url:"instruction,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ModelsFactRatingInstruction) GetExamples() *ModelsFactRatingExamples {
	if m == nil {
		return nil
	}
	return m.Examples
}

func (m *ModelsFactRatingInstruction) GetInstruction() *string {
	if m == nil {
		return nil
	}
	return m.Instruction
}

func (m *ModelsFactRatingInstruction) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ModelsFactRatingInstruction) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelsFactRatingInstruction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelsFactRatingInstruction(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelsFactRatingInstruction) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ApidataUpdateUserRequest struct {
	// The email address of the user.
	Email *string `json:"email,omitempty" url:"-"`
	// Optional instruction to use for fact rating.
	FactRatingInstruction *ApidataFactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"-"`
	// The first name of the user.
	FirstName *string `json:"first_name,omitempty" url:"-"`
	// The last name of the user.
	LastName *string `json:"last_name,omitempty" url:"-"`
	// The metadata to update
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}
