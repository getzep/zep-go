// Code generated by Fern. DO NOT EDIT.

package user

import (
	context "context"
	v3 "github.com/getzep/zep-go/v3"
	core "github.com/getzep/zep-go/v3/core"
	internal "github.com/getzep/zep-go/v3/internal"
	option "github.com/getzep/zep-go/v3/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("ZEP_API_KEY")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Adds a user.
func (c *Client) Add(
	ctx context.Context,
	request *v3.CreateUserRequest,
	opts ...option.RequestOption,
) (*v3.User, error) {
	response, err := c.WithRawResponse.Add(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns all users.
func (c *Client) ListOrdered(
	ctx context.Context,
	request *v3.UserListOrderedRequest,
	opts ...option.RequestOption,
) (*v3.UserListResponse, error) {
	response, err := c.WithRawResponse.ListOrdered(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a user.
func (c *Client) Get(
	ctx context.Context,
	// The user_id of the user to get.
	userID string,
	opts ...option.RequestOption,
) (*v3.User, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		userID,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a user.
func (c *Client) Delete(
	ctx context.Context,
	// User ID
	userID string,
	opts ...option.RequestOption,
) (*v3.SuccessResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		userID,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates a user.
func (c *Client) Update(
	ctx context.Context,
	// User ID
	userID string,
	request *v3.UpdateUserRequest,
	opts ...option.RequestOption,
) (*v3.User, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		userID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a user's node.
func (c *Client) GetNode(
	ctx context.Context,
	// The user_id of the user to get the node for.
	userID string,
	opts ...option.RequestOption,
) (*v3.UserNodeResponse, error) {
	response, err := c.WithRawResponse.GetNode(
		ctx,
		userID,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
