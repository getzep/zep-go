// This file was auto-generated by Fern from our API Definition.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v2/internal"
)

type AddDataRequest struct {
	Data    *string        `json:"data,omitempty" url:"-"`
	GroupID *string        `json:"group_id,omitempty" url:"-"`
	Type    *GraphDataType `json:"type,omitempty" url:"-"`
	UserID  *string        `json:"user_id,omitempty" url:"-"`
}

type AddTripleRequest struct {
	// The timestamp of the message
	CreatedAt *string `json:"created_at,omitempty" url:"-"`
	// The time (if any) at which the edge expires
	ExpiredAt *string `json:"expired_at,omitempty" url:"-"`
	// The fact relating the two nodes that this edge represents
	Fact string `json:"fact" url:"-"`
	// The name of the edge to add. Should be all caps using snake case (eg RELATES_TO)
	FactName string `json:"fact_name" url:"-"`
	// The uuid of the edge to add
	FactUUID *string `json:"fact_uuid,omitempty" url:"-"`
	GroupID  *string `json:"group_id,omitempty" url:"-"`
	// The time (if any) at which the fact stops being true
	InvalidAt *string `json:"invalid_at,omitempty" url:"-"`
	// The name of the source node to add
	SourceNodeName *string `json:"source_node_name,omitempty" url:"-"`
	// The summary of the source node to add
	SourceNodeSummary *string `json:"source_node_summary,omitempty" url:"-"`
	// The source node uuid
	SourceNodeUUID *string `json:"source_node_uuid,omitempty" url:"-"`
	// The name of the target node to add
	TargetNodeName string `json:"target_node_name" url:"-"`
	// The summary of the target node to add
	TargetNodeSummary *string `json:"target_node_summary,omitempty" url:"-"`
	// The target node uuid
	TargetNodeUUID *string `json:"target_node_uuid,omitempty" url:"-"`
	UserID         *string `json:"user_id,omitempty" url:"-"`
	// The time at which the fact becomes true
	ValidAt *string `json:"valid_at,omitempty" url:"-"`
}

type GraphSearchQuery struct {
	// Node to rerank around for node distance reranking
	CenterNodeUUID *string `json:"center_node_uuid,omitempty" url:"-"`
	// one of user_id or group_id must be provided
	GroupID *string `json:"group_id,omitempty" url:"-"`
	// The maximum number of facts to retrieve. Defaults to 10. Limited to 50.
	Limit *int `json:"limit,omitempty" url:"-"`
	// Deprecated
	MinScore *float64 `json:"min_score,omitempty" url:"-"`
	// weighting for maximal marginal relevance
	MmrLambda *float64 `json:"mmr_lambda,omitempty" url:"-"`
	// The string to search for (required)
	Query string `json:"query" url:"-"`
	// Defaults to RRF
	Reranker *Reranker `json:"reranker,omitempty" url:"-"`
	// Defaults to Edges. Communities will be added in the future.
	Scope *GraphSearchScope `json:"scope,omitempty" url:"-"`
	// Search filters to apply to the search
	SearchFilters *SearchFilters `json:"search_filters,omitempty" url:"-"`
	// one of user_id or group_id must be provided
	UserID *string `json:"user_id,omitempty" url:"-"`
}

type AddTripleResponse struct {
	Edge       *EntityEdge `json:"edge,omitempty" url:"edge,omitempty"`
	SourceNode *EntityNode `json:"source_node,omitempty" url:"source_node,omitempty"`
	TargetNode *EntityNode `json:"target_node,omitempty" url:"target_node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddTripleResponse) GetEdge() *EntityEdge {
	if a == nil {
		return nil
	}
	return a.Edge
}

func (a *AddTripleResponse) GetSourceNode() *EntityNode {
	if a == nil {
		return nil
	}
	return a.SourceNode
}

func (a *AddTripleResponse) GetTargetNode() *EntityNode {
	if a == nil {
		return nil
	}
	return a.TargetNode
}

func (a *AddTripleResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddTripleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddTripleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddTripleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddTripleResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type GraphSearchResults struct {
	Edges []*EntityEdge `json:"edges,omitempty" url:"edges,omitempty"`
	Nodes []*EntityNode `json:"nodes,omitempty" url:"nodes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GraphSearchResults) GetEdges() []*EntityEdge {
	if g == nil {
		return nil
	}
	return g.Edges
}

func (g *GraphSearchResults) GetNodes() []*EntityNode {
	if g == nil {
		return nil
	}
	return g.Nodes
}

func (g *GraphSearchResults) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GraphSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler GraphSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GraphSearchResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GraphSearchResults) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GraphSearchScope string

const (
	GraphSearchScopeEdges GraphSearchScope = "edges"
	GraphSearchScopeNodes GraphSearchScope = "nodes"
)

func NewGraphSearchScopeFromString(s string) (GraphSearchScope, error) {
	switch s {
	case "edges":
		return GraphSearchScopeEdges, nil
	case "nodes":
		return GraphSearchScopeNodes, nil
	}
	var t GraphSearchScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GraphSearchScope) Ptr() *GraphSearchScope {
	return &g
}

type Reranker string

const (
	RerankerRrf             Reranker = "rrf"
	RerankerMmr             Reranker = "mmr"
	RerankerNodeDistance    Reranker = "node_distance"
	RerankerEpisodeMentions Reranker = "episode_mentions"
	RerankerCrossEncoder    Reranker = "cross_encoder"
)

func NewRerankerFromString(s string) (Reranker, error) {
	switch s {
	case "rrf":
		return RerankerRrf, nil
	case "mmr":
		return RerankerMmr, nil
	case "node_distance":
		return RerankerNodeDistance, nil
	case "episode_mentions":
		return RerankerEpisodeMentions, nil
	case "cross_encoder":
		return RerankerCrossEncoder, nil
	}
	var t Reranker
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Reranker) Ptr() *Reranker {
	return &r
}

type SearchFilters struct {
	// List of node labels to filter on
	NodeLabels []string `json:"node_labels,omitempty" url:"node_labels,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchFilters) GetNodeLabels() []string {
	if s == nil {
		return nil
	}
	return s.NodeLabels
}

func (s *SearchFilters) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFilters) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
