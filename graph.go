// Code generated by Fern. DO NOT EDIT.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v3/internal"
)

type AddDataRequest struct {
	CreatedAt *string `json:"created_at,omitempty" url:"-"`
	Data      string  `json:"data" url:"-"`
	// graph_id is the ID of the graph to which the data will be added. If adding to the user graph, please use user_id field instead.
	GraphID           *string       `json:"graph_id,omitempty" url:"-"`
	SourceDescription *string       `json:"source_description,omitempty" url:"-"`
	Type              GraphDataType `json:"type" url:"-"`
	// User ID is the ID of the user to which the data will be added. If not adding to a user graph, please use graph_id field instead.
	UserID *string `json:"user_id,omitempty" url:"-"`
}

type AddDataBatchRequest struct {
	Episodes []*EpisodeData `json:"episodes,omitempty" url:"-"`
	// graph_id is the ID of the graph to which the data will be added. If adding to the user graph, please use user_id field instead.
	GraphID *string `json:"graph_id,omitempty" url:"-"`
	// User ID is the ID of the user to which the data will be added. If not adding to a user graph, please use graph_id field instead.
	UserID *string `json:"user_id,omitempty" url:"-"`
}

type AddTripleRequest struct {
	// The timestamp of the message
	CreatedAt *string `json:"created_at,omitempty" url:"-"`
	// The time (if any) at which the edge expires
	ExpiredAt *string `json:"expired_at,omitempty" url:"-"`
	// The fact relating the two nodes that this edge represents
	Fact string `json:"fact" url:"-"`
	// The name of the edge to add. Should be all caps using snake case (eg RELATES_TO)
	FactName string `json:"fact_name" url:"-"`
	// The uuid of the edge to add
	FactUUID *string `json:"fact_uuid,omitempty" url:"-"`
	GraphID  *string `json:"graph_id,omitempty" url:"-"`
	// The time (if any) at which the fact stops being true
	InvalidAt *string `json:"invalid_at,omitempty" url:"-"`
	// The name of the source node to add
	SourceNodeName *string `json:"source_node_name,omitempty" url:"-"`
	// The summary of the source node to add
	SourceNodeSummary *string `json:"source_node_summary,omitempty" url:"-"`
	// The source node uuid
	SourceNodeUUID *string `json:"source_node_uuid,omitempty" url:"-"`
	// The name of the target node to add
	TargetNodeName string `json:"target_node_name" url:"-"`
	// The summary of the target node to add
	TargetNodeSummary *string `json:"target_node_summary,omitempty" url:"-"`
	// The target node uuid
	TargetNodeUUID *string `json:"target_node_uuid,omitempty" url:"-"`
	UserID         *string `json:"user_id,omitempty" url:"-"`
	// The time at which the fact becomes true
	ValidAt *string `json:"valid_at,omitempty" url:"-"`
}

type CloneGraphRequest struct {
	// source_graph_id is the ID of the graph to be cloned. Required if source_user_id is not provided
	SourceGraphID *string `json:"source_graph_id,omitempty" url:"-"`
	// user_id of the user whose graph is being cloned. Required if source_graph_id is not provided
	SourceUserID *string `json:"source_user_id,omitempty" url:"-"`
	// target_graph_id is the ID to be set on the cloned graph. Must not point to an existing graph. Required if target_user_id is not provided.
	TargetGraphID *string `json:"target_graph_id,omitempty" url:"-"`
	// user_id to be set on the cloned user. Must not point to an existing user. Required if target_graph_id is not provided.
	TargetUserID *string `json:"target_user_id,omitempty" url:"-"`
}

type CreateGraphRequest struct {
	Description           *string                `json:"description,omitempty" url:"-"`
	FactRatingInstruction *FactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"-"`
	GraphID               string                 `json:"graph_id" url:"-"`
	Name                  *string                `json:"name,omitempty" url:"-"`
}

type GraphListAllRequest struct {
	// Page number for pagination, starting from 1.
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
	// Number of graphs to retrieve per page.
	PageSize *int `json:"-" url:"pageSize,omitempty"`
}

type GraphSearchQuery struct {
	// Nodes that are the origins of the BFS searches
	BfsOriginNodeUUIDs []string `json:"bfs_origin_node_uuids,omitempty" url:"-"`
	// Node to rerank around for node distance reranking
	CenterNodeUUID *string `json:"center_node_uuid,omitempty" url:"-"`
	// The graph_id to search in. When searching user graph, please use user_id instead.
	GraphID *string `json:"graph_id,omitempty" url:"-"`
	// The maximum number of facts to retrieve. Defaults to 10. Limited to 50.
	Limit *int `json:"limit,omitempty" url:"-"`
	// The minimum rating by which to filter relevant facts
	MinFactRating *float64 `json:"min_fact_rating,omitempty" url:"-"`
	// Deprecated
	MinScore *float64 `json:"min_score,omitempty" url:"-"`
	// weighting for maximal marginal relevance
	MmrLambda *float64 `json:"mmr_lambda,omitempty" url:"-"`
	// The string to search for (required)
	Query string `json:"query" url:"-"`
	// Defaults to RRF
	Reranker *Reranker `json:"reranker,omitempty" url:"-"`
	// Defaults to Edges. Communities will be added in the future.
	Scope *GraphSearchScope `json:"scope,omitempty" url:"-"`
	// Search filters to apply to the search
	SearchFilters *SearchFilters `json:"search_filters,omitempty" url:"-"`
	// The user_id when searching user graph. If not searching user graph, please use graph_id instead.
	UserID *string `json:"user_id,omitempty" url:"-"`
}

type AddTripleResponse struct {
	Edge       *EntityEdge `json:"edge,omitempty" url:"edge,omitempty"`
	SourceNode *EntityNode `json:"source_node,omitempty" url:"source_node,omitempty"`
	TargetNode *EntityNode `json:"target_node,omitempty" url:"target_node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddTripleResponse) GetEdge() *EntityEdge {
	if a == nil {
		return nil
	}
	return a.Edge
}

func (a *AddTripleResponse) GetSourceNode() *EntityNode {
	if a == nil {
		return nil
	}
	return a.SourceNode
}

func (a *AddTripleResponse) GetTargetNode() *EntityNode {
	if a == nil {
		return nil
	}
	return a.TargetNode
}

func (a *AddTripleResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddTripleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddTripleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddTripleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddTripleResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CloneGraphResponse struct {
	// graph_id is the ID of the cloned graph
	GraphID *string `json:"graph_id,omitempty" url:"graph_id,omitempty"`
	UserID  *string `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CloneGraphResponse) GetGraphID() *string {
	if c == nil {
		return nil
	}
	return c.GraphID
}

func (c *CloneGraphResponse) GetUserID() *string {
	if c == nil {
		return nil
	}
	return c.UserID
}

func (c *CloneGraphResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CloneGraphResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CloneGraphResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CloneGraphResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CloneGraphResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComparisonOperator string

const (
	ComparisonOperatorEquals           ComparisonOperator = "="
	ComparisonOperatorNotEquals        ComparisonOperator = "<>"
	ComparisonOperatorGreaterThan      ComparisonOperator = ">"
	ComparisonOperatorLessThan         ComparisonOperator = "<"
	ComparisonOperatorGreaterThanEqual ComparisonOperator = ">="
	ComparisonOperatorLessThanEqual    ComparisonOperator = "<="
)

func NewComparisonOperatorFromString(s string) (ComparisonOperator, error) {
	switch s {
	case "=":
		return ComparisonOperatorEquals, nil
	case "<>":
		return ComparisonOperatorNotEquals, nil
	case ">":
		return ComparisonOperatorGreaterThan, nil
	case "<":
		return ComparisonOperatorLessThan, nil
	case ">=":
		return ComparisonOperatorGreaterThanEqual, nil
	case "<=":
		return ComparisonOperatorLessThanEqual, nil
	}
	var t ComparisonOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ComparisonOperator) Ptr() *ComparisonOperator {
	return &c
}

type DateFilter struct {
	// Comparison operator for date filter
	ComparisonOperator ComparisonOperator `json:"comparison_operator" url:"comparison_operator"`
	// Date to filter on
	Date string `json:"date" url:"date"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DateFilter) GetComparisonOperator() ComparisonOperator {
	if d == nil {
		return ""
	}
	return d.ComparisonOperator
}

func (d *DateFilter) GetDate() string {
	if d == nil {
		return ""
	}
	return d.Date
}

func (d *DateFilter) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DateFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler DateFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DateFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DateFilter) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EpisodeData struct {
	CreatedAt         *string       `json:"created_at,omitempty" url:"created_at,omitempty"`
	Data              string        `json:"data" url:"data"`
	SourceDescription *string       `json:"source_description,omitempty" url:"source_description,omitempty"`
	Type              GraphDataType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EpisodeData) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EpisodeData) GetData() string {
	if e == nil {
		return ""
	}
	return e.Data
}

func (e *EpisodeData) GetSourceDescription() *string {
	if e == nil {
		return nil
	}
	return e.SourceDescription
}

func (e *EpisodeData) GetType() GraphDataType {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *EpisodeData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EpisodeData) UnmarshalJSON(data []byte) error {
	type unmarshaler EpisodeData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EpisodeData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EpisodeData) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Graph struct {
	CreatedAt             *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	Description           *string                `json:"description,omitempty" url:"description,omitempty"`
	FactRatingInstruction *FactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"fact_rating_instruction,omitempty"`
	GraphID               *string                `json:"graph_id,omitempty" url:"graph_id,omitempty"`
	ID                    *int                   `json:"id,omitempty" url:"id,omitempty"`
	Name                  *string                `json:"name,omitempty" url:"name,omitempty"`
	ProjectUUID           *string                `json:"project_uuid,omitempty" url:"project_uuid,omitempty"`
	UUID                  *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *Graph) GetCreatedAt() *string {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *Graph) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *Graph) GetFactRatingInstruction() *FactRatingInstruction {
	if g == nil {
		return nil
	}
	return g.FactRatingInstruction
}

func (g *Graph) GetGraphID() *string {
	if g == nil {
		return nil
	}
	return g.GraphID
}

func (g *Graph) GetID() *int {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *Graph) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *Graph) GetProjectUUID() *string {
	if g == nil {
		return nil
	}
	return g.ProjectUUID
}

func (g *Graph) GetUUID() *string {
	if g == nil {
		return nil
	}
	return g.UUID
}

func (g *Graph) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *Graph) UnmarshalJSON(data []byte) error {
	type unmarshaler Graph
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = Graph(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *Graph) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GraphListResponse struct {
	Graphs     []*Graph `json:"graphs,omitempty" url:"graphs,omitempty"`
	RowCount   *int     `json:"row_count,omitempty" url:"row_count,omitempty"`
	TotalCount *int     `json:"total_count,omitempty" url:"total_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GraphListResponse) GetGraphs() []*Graph {
	if g == nil {
		return nil
	}
	return g.Graphs
}

func (g *GraphListResponse) GetRowCount() *int {
	if g == nil {
		return nil
	}
	return g.RowCount
}

func (g *GraphListResponse) GetTotalCount() *int {
	if g == nil {
		return nil
	}
	return g.TotalCount
}

func (g *GraphListResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GraphListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GraphListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GraphListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GraphListResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GraphSearchResults struct {
	Edges    []*EntityEdge `json:"edges,omitempty" url:"edges,omitempty"`
	Episodes []*Episode    `json:"episodes,omitempty" url:"episodes,omitempty"`
	Nodes    []*EntityNode `json:"nodes,omitempty" url:"nodes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GraphSearchResults) GetEdges() []*EntityEdge {
	if g == nil {
		return nil
	}
	return g.Edges
}

func (g *GraphSearchResults) GetEpisodes() []*Episode {
	if g == nil {
		return nil
	}
	return g.Episodes
}

func (g *GraphSearchResults) GetNodes() []*EntityNode {
	if g == nil {
		return nil
	}
	return g.Nodes
}

func (g *GraphSearchResults) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GraphSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler GraphSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GraphSearchResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GraphSearchResults) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GraphSearchScope string

const (
	GraphSearchScopeEdges    GraphSearchScope = "edges"
	GraphSearchScopeNodes    GraphSearchScope = "nodes"
	GraphSearchScopeEpisodes GraphSearchScope = "episodes"
)

func NewGraphSearchScopeFromString(s string) (GraphSearchScope, error) {
	switch s {
	case "edges":
		return GraphSearchScopeEdges, nil
	case "nodes":
		return GraphSearchScopeNodes, nil
	case "episodes":
		return GraphSearchScopeEpisodes, nil
	}
	var t GraphSearchScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GraphSearchScope) Ptr() *GraphSearchScope {
	return &g
}

type Reranker string

const (
	RerankerRrf             Reranker = "rrf"
	RerankerMmr             Reranker = "mmr"
	RerankerNodeDistance    Reranker = "node_distance"
	RerankerEpisodeMentions Reranker = "episode_mentions"
	RerankerCrossEncoder    Reranker = "cross_encoder"
)

func NewRerankerFromString(s string) (Reranker, error) {
	switch s {
	case "rrf":
		return RerankerRrf, nil
	case "mmr":
		return RerankerMmr, nil
	case "node_distance":
		return RerankerNodeDistance, nil
	case "episode_mentions":
		return RerankerEpisodeMentions, nil
	case "cross_encoder":
		return RerankerCrossEncoder, nil
	}
	var t Reranker
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Reranker) Ptr() *Reranker {
	return &r
}

type SearchFilters struct {
	// 2D array of date filters for the created_at field.
	// The outer array elements are combined with OR logic.
	// The inner array elements are combined with AND logic.
	// Example: [[{">", date1}, {"<", date2}], [{"=", date3}]]
	// This translates to: (created_at > date1 AND created_at < date2) OR (created_at = date3)
	CreatedAt [][]*DateFilter `json:"created_at,omitempty" url:"created_at,omitempty"`
	// List of edge types to filter on
	EdgeTypes []string `json:"edge_types,omitempty" url:"edge_types,omitempty"`
	// 2D array of date filters for the expired_at field.
	// The outer array elements are combined with OR logic.
	// The inner array elements are combined with AND logic.
	// Example: [[{">", date1}, {"<", date2}], [{"=", date3}]]
	// This translates to: (expired_at > date1 AND expired_at < date2) OR (expired_at = date3)
	ExpiredAt [][]*DateFilter `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	// 2D array of date filters for the invalid_at field.
	// The outer array elements are combined with OR logic.
	// The inner array elements are combined with AND logic.
	// Example: [[{">", date1}, {"<", date2}], [{"=", date3}]]
	// This translates to: (invalid_at > date1 AND invalid_at < date2) OR (invalid_at = date3)
	InvalidAt [][]*DateFilter `json:"invalid_at,omitempty" url:"invalid_at,omitempty"`
	// List of node labels to filter on
	NodeLabels []string `json:"node_labels,omitempty" url:"node_labels,omitempty"`
	// 2D array of date filters for the valid_at field.
	// The outer array elements are combined with OR logic.
	// The inner array elements are combined with AND logic.
	// Example: [[{">", date1}, {"<", date2}], [{"=", date3}]]
	// This translates to: (valid_at > date1 AND valid_at < date2) OR (valid_at = date3)
	ValidAt [][]*DateFilter `json:"valid_at,omitempty" url:"valid_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchFilters) GetCreatedAt() [][]*DateFilter {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SearchFilters) GetEdgeTypes() []string {
	if s == nil {
		return nil
	}
	return s.EdgeTypes
}

func (s *SearchFilters) GetExpiredAt() [][]*DateFilter {
	if s == nil {
		return nil
	}
	return s.ExpiredAt
}

func (s *SearchFilters) GetInvalidAt() [][]*DateFilter {
	if s == nil {
		return nil
	}
	return s.InvalidAt
}

func (s *SearchFilters) GetNodeLabels() []string {
	if s == nil {
		return nil
	}
	return s.NodeLabels
}

func (s *SearchFilters) GetValidAt() [][]*DateFilter {
	if s == nil {
		return nil
	}
	return s.ValidAt
}

func (s *SearchFilters) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFilters) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateGraphRequest struct {
	Description           *string                `json:"description,omitempty" url:"-"`
	FactRatingInstruction *FactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"-"`
	Name                  *string                `json:"name,omitempty" url:"-"`
}
