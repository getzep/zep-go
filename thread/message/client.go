// Code generated by Fern. DO NOT EDIT.

package message

import (
	context "context"
	v3 "github.com/getzep/zep-go/v3"
	core "github.com/getzep/zep-go/v3/core"
	internal "github.com/getzep/zep-go/v3/internal"
	option "github.com/getzep/zep-go/v3/option"
	thread "github.com/getzep/zep-go/v3/thread"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("ZEP_API_KEY")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Updates a message.
func (c *Client) Update(
	ctx context.Context,
	// The UUID of the message.
	messageUUID string,
	request *thread.ModelsThreadMessageUpdate,
	opts ...option.RequestOption,
) (*v3.Message, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		messageUUID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
