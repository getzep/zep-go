// Code generated by Fern. DO NOT EDIT.

package thread

import (
	context "context"
	v3 "github.com/getzep/zep-go/v3"
	core "github.com/getzep/zep-go/v3/core"
	internal "github.com/getzep/zep-go/v3/internal"
	option "github.com/getzep/zep-go/v3/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("ZEP_API_KEY")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns all threads.
func (c *Client) ListAll(
	ctx context.Context,
	request *v3.ThreadListAllRequest,
	opts ...option.RequestOption,
) (*v3.ThreadListResponse, error) {
	response, err := c.WithRawResponse.ListAll(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Start a new thread.
func (c *Client) Create(
	ctx context.Context,
	request *v3.ModelsCreateThreadRequest,
	opts ...option.RequestOption,
) (*v3.Thread, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a thread.
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the thread for which memory should be deleted.
	threadID string,
	opts ...option.RequestOption,
) (*v3.SuccessResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		threadID,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns most relevant context for a given thread.
func (c *Client) GetUserContext(
	ctx context.Context,
	// The ID of the thread for which to retrieve context.
	threadID string,
	request *v3.ThreadGetUserContextRequest,
	opts ...option.RequestOption,
) (*v3.ThreadContextResponse, error) {
	response, err := c.WithRawResponse.GetUserContext(
		ctx,
		threadID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns messages for a thread.
func (c *Client) Get(
	ctx context.Context,
	// Thread ID
	threadID string,
	request *v3.ThreadGetRequest,
	opts ...option.RequestOption,
) (*v3.MessageListResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		threadID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Add messages to a thread.
func (c *Client) AddMessages(
	ctx context.Context,
	// The ID of the thread to which messages should be added.
	threadID string,
	request *v3.AddThreadMessagesRequest,
	opts ...option.RequestOption,
) (*v3.AddThreadMessagesResponse, error) {
	response, err := c.WithRawResponse.AddMessages(
		ctx,
		threadID,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
