// Code generated by Fern. DO NOT EDIT.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v3/internal"
)

type ApidataAPIError struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataAPIError) GetMessage() *string {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *ApidataAPIError) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataAPIError) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataAPIError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataAPIError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataAPIError) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataEpisodeMentions struct {
	Edges []*GraphitiEntityEdge `json:"edges,omitempty" url:"edges,omitempty"`
	Nodes []*GraphitiEntityNode `json:"nodes,omitempty" url:"nodes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataEpisodeMentions) GetEdges() []*GraphitiEntityEdge {
	if a == nil {
		return nil
	}
	return a.Edges
}

func (a *ApidataEpisodeMentions) GetNodes() []*GraphitiEntityNode {
	if a == nil {
		return nil
	}
	return a.Nodes
}

func (a *ApidataEpisodeMentions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataEpisodeMentions) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataEpisodeMentions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataEpisodeMentions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataEpisodeMentions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataFact struct {
	Content   string  `json:"content" url:"content"`
	CreatedAt string  `json:"created_at" url:"created_at"`
	ExpiredAt *string `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	// Deprecated
	Fact           string   `json:"fact" url:"fact"`
	InvalidAt      *string  `json:"invalid_at,omitempty" url:"invalid_at,omitempty"`
	Name           *string  `json:"name,omitempty" url:"name,omitempty"`
	Rating         *float64 `json:"rating,omitempty" url:"rating,omitempty"`
	SourceNodeName *string  `json:"source_node_name,omitempty" url:"source_node_name,omitempty"`
	TargetNodeName *string  `json:"target_node_name,omitempty" url:"target_node_name,omitempty"`
	UUID           string   `json:"uuid" url:"uuid"`
	ValidAt        *string  `json:"valid_at,omitempty" url:"valid_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataFact) GetContent() string {
	if a == nil {
		return ""
	}
	return a.Content
}

func (a *ApidataFact) GetCreatedAt() string {
	if a == nil {
		return ""
	}
	return a.CreatedAt
}

func (a *ApidataFact) GetExpiredAt() *string {
	if a == nil {
		return nil
	}
	return a.ExpiredAt
}

func (a *ApidataFact) GetFact() string {
	if a == nil {
		return ""
	}
	return a.Fact
}

func (a *ApidataFact) GetInvalidAt() *string {
	if a == nil {
		return nil
	}
	return a.InvalidAt
}

func (a *ApidataFact) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ApidataFact) GetRating() *float64 {
	if a == nil {
		return nil
	}
	return a.Rating
}

func (a *ApidataFact) GetSourceNodeName() *string {
	if a == nil {
		return nil
	}
	return a.SourceNodeName
}

func (a *ApidataFact) GetTargetNodeName() *string {
	if a == nil {
		return nil
	}
	return a.TargetNodeName
}

func (a *ApidataFact) GetUUID() string {
	if a == nil {
		return ""
	}
	return a.UUID
}

func (a *ApidataFact) GetValidAt() *string {
	if a == nil {
		return nil
	}
	return a.ValidAt
}

func (a *ApidataFact) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataFact) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataFact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataFact(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataFact) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataFactRatingExamples struct {
	High   *string `json:"high,omitempty" url:"high,omitempty"`
	Low    *string `json:"low,omitempty" url:"low,omitempty"`
	Medium *string `json:"medium,omitempty" url:"medium,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataFactRatingExamples) GetHigh() *string {
	if a == nil {
		return nil
	}
	return a.High
}

func (a *ApidataFactRatingExamples) GetLow() *string {
	if a == nil {
		return nil
	}
	return a.Low
}

func (a *ApidataFactRatingExamples) GetMedium() *string {
	if a == nil {
		return nil
	}
	return a.Medium
}

func (a *ApidataFactRatingExamples) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataFactRatingExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataFactRatingExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataFactRatingExamples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataFactRatingExamples) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataFactRatingInstruction struct {
	// Examples is a list of examples that demonstrate how facts might be rated based on your instruction. You should provide
	// an example of a highly rated example, a low rated example, and a medium (or in between example). For example, if you are rating
	// based on relevance to a trip planning application, your examples might be:
	// High: "Joe's dream vacation is Bali"
	// Medium: "Joe has a fear of flying",
	// Low: "Joe's favorite food is Japanese",
	Examples *ApidataFactRatingExamples `json:"examples,omitempty" url:"examples,omitempty"`
	// A string describing how to rate facts as they apply to your application. A trip planning application may
	// use something like "relevancy to planning a trip, the user's preferences when traveling,
	// or the user's travel history."
	Instruction *string `json:"instruction,omitempty" url:"instruction,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataFactRatingInstruction) GetExamples() *ApidataFactRatingExamples {
	if a == nil {
		return nil
	}
	return a.Examples
}

func (a *ApidataFactRatingInstruction) GetInstruction() *string {
	if a == nil {
		return nil
	}
	return a.Instruction
}

func (a *ApidataFactRatingInstruction) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataFactRatingInstruction) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataFactRatingInstruction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataFactRatingInstruction(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataFactRatingInstruction) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataGraphEdgesRequest struct {
	// Maximum number of items to return
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// UUID based cursor, used for pagination. Should be the UUID of the last item in the previous page
	UUIDCursor *string `json:"uuid_cursor,omitempty" url:"uuid_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataGraphEdgesRequest) GetLimit() *int {
	if a == nil {
		return nil
	}
	return a.Limit
}

func (a *ApidataGraphEdgesRequest) GetUUIDCursor() *string {
	if a == nil {
		return nil
	}
	return a.UUIDCursor
}

func (a *ApidataGraphEdgesRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataGraphEdgesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataGraphEdgesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataGraphEdgesRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataGraphEdgesRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataGraphEpisode struct {
	Content   string `json:"content" url:"content"`
	CreatedAt string `json:"created_at" url:"created_at"`
	Processed *bool  `json:"processed,omitempty" url:"processed,omitempty"`
	// Optional role, will only be present if the episode was created using memory.add API
	Role *string `json:"role,omitempty" url:"role,omitempty"`
	// Optional role_type, will only be present if the episode was created using memory.add API
	RoleType          *ApidataRoleType     `json:"role_type,omitempty" url:"role_type,omitempty"`
	SessionID         *string              `json:"session_id,omitempty" url:"session_id,omitempty"`
	Source            *ModelsGraphDataType `json:"source,omitempty" url:"source,omitempty"`
	SourceDescription *string              `json:"source_description,omitempty" url:"source_description,omitempty"`
	UUID              string               `json:"uuid" url:"uuid"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataGraphEpisode) GetContent() string {
	if a == nil {
		return ""
	}
	return a.Content
}

func (a *ApidataGraphEpisode) GetCreatedAt() string {
	if a == nil {
		return ""
	}
	return a.CreatedAt
}

func (a *ApidataGraphEpisode) GetProcessed() *bool {
	if a == nil {
		return nil
	}
	return a.Processed
}

func (a *ApidataGraphEpisode) GetRole() *string {
	if a == nil {
		return nil
	}
	return a.Role
}

func (a *ApidataGraphEpisode) GetRoleType() *ApidataRoleType {
	if a == nil {
		return nil
	}
	return a.RoleType
}

func (a *ApidataGraphEpisode) GetSessionID() *string {
	if a == nil {
		return nil
	}
	return a.SessionID
}

func (a *ApidataGraphEpisode) GetSource() *ModelsGraphDataType {
	if a == nil {
		return nil
	}
	return a.Source
}

func (a *ApidataGraphEpisode) GetSourceDescription() *string {
	if a == nil {
		return nil
	}
	return a.SourceDescription
}

func (a *ApidataGraphEpisode) GetUUID() string {
	if a == nil {
		return ""
	}
	return a.UUID
}

func (a *ApidataGraphEpisode) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataGraphEpisode) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataGraphEpisode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataGraphEpisode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataGraphEpisode) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataGraphEpisodeResponse struct {
	Episodes []*ApidataGraphEpisode `json:"episodes,omitempty" url:"episodes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataGraphEpisodeResponse) GetEpisodes() []*ApidataGraphEpisode {
	if a == nil {
		return nil
	}
	return a.Episodes
}

func (a *ApidataGraphEpisodeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataGraphEpisodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataGraphEpisodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataGraphEpisodeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataGraphEpisodeResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataGraphNodesRequest struct {
	// Maximum number of items to return
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// UUID based cursor, used for pagination. Should be the UUID of the last item in the previous page
	UUIDCursor *string `json:"uuid_cursor,omitempty" url:"uuid_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataGraphNodesRequest) GetLimit() *int {
	if a == nil {
		return nil
	}
	return a.Limit
}

func (a *ApidataGraphNodesRequest) GetUUIDCursor() *string {
	if a == nil {
		return nil
	}
	return a.UUIDCursor
}

func (a *ApidataGraphNodesRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataGraphNodesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataGraphNodesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataGraphNodesRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataGraphNodesRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataRoleType string

const (
	ApidataRoleTypeNoRole        ApidataRoleType = "norole"
	ApidataRoleTypeSystemRole    ApidataRoleType = "system"
	ApidataRoleTypeAssistantRole ApidataRoleType = "assistant"
	ApidataRoleTypeUserRole      ApidataRoleType = "user"
	ApidataRoleTypeFunctionRole  ApidataRoleType = "function"
	ApidataRoleTypeToolRole      ApidataRoleType = "tool"
)

func NewApidataRoleTypeFromString(s string) (ApidataRoleType, error) {
	switch s {
	case "norole":
		return ApidataRoleTypeNoRole, nil
	case "system":
		return ApidataRoleTypeSystemRole, nil
	case "assistant":
		return ApidataRoleTypeAssistantRole, nil
	case "user":
		return ApidataRoleTypeUserRole, nil
	case "function":
		return ApidataRoleTypeFunctionRole, nil
	case "tool":
		return ApidataRoleTypeToolRole, nil
	}
	var t ApidataRoleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ApidataRoleType) Ptr() *ApidataRoleType {
	return &a
}

type ApidataSuccessResponse struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataSuccessResponse) GetMessage() *string {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *ApidataSuccessResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataSuccessResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataSuccessResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataSuccessResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataSuccessResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type GraphitiEntityEdge struct {
	// Additional attributes of the edge. Dependent on edge types
	Attributes map[string]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Creation time of the edge
	CreatedAt string `json:"created_at" url:"created_at"`
	// List of episode ids that reference these entity edges
	Episodes []string `json:"episodes,omitempty" url:"episodes,omitempty"`
	// Datetime of when the node was invalidated
	ExpiredAt *string `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	// Fact representing the edge and nodes that it connects
	Fact string `json:"fact" url:"fact"`
	// Datetime of when the fact stopped being true
	InvalidAt *string `json:"invalid_at,omitempty" url:"invalid_at,omitempty"`
	// Name of the edge, relation name
	Name string `json:"name" url:"name"`
	// UUID of the source node
	SourceNodeUUID string `json:"source_node_uuid" url:"source_node_uuid"`
	// UUID of the target node
	TargetNodeUUID string `json:"target_node_uuid" url:"target_node_uuid"`
	// UUID of the edge
	UUID string `json:"uuid" url:"uuid"`
	// Datetime of when the fact became true
	ValidAt *string `json:"valid_at,omitempty" url:"valid_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GraphitiEntityEdge) GetAttributes() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Attributes
}

func (g *GraphitiEntityEdge) GetCreatedAt() string {
	if g == nil {
		return ""
	}
	return g.CreatedAt
}

func (g *GraphitiEntityEdge) GetEpisodes() []string {
	if g == nil {
		return nil
	}
	return g.Episodes
}

func (g *GraphitiEntityEdge) GetExpiredAt() *string {
	if g == nil {
		return nil
	}
	return g.ExpiredAt
}

func (g *GraphitiEntityEdge) GetFact() string {
	if g == nil {
		return ""
	}
	return g.Fact
}

func (g *GraphitiEntityEdge) GetInvalidAt() *string {
	if g == nil {
		return nil
	}
	return g.InvalidAt
}

func (g *GraphitiEntityEdge) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GraphitiEntityEdge) GetSourceNodeUUID() string {
	if g == nil {
		return ""
	}
	return g.SourceNodeUUID
}

func (g *GraphitiEntityEdge) GetTargetNodeUUID() string {
	if g == nil {
		return ""
	}
	return g.TargetNodeUUID
}

func (g *GraphitiEntityEdge) GetUUID() string {
	if g == nil {
		return ""
	}
	return g.UUID
}

func (g *GraphitiEntityEdge) GetValidAt() *string {
	if g == nil {
		return nil
	}
	return g.ValidAt
}

func (g *GraphitiEntityEdge) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GraphitiEntityEdge) UnmarshalJSON(data []byte) error {
	type unmarshaler GraphitiEntityEdge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GraphitiEntityEdge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GraphitiEntityEdge) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GraphitiEntityNode struct {
	// Additional attributes of the node. Dependent on node labels
	Attributes map[string]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Creation time of the node
	CreatedAt string `json:"created_at" url:"created_at"`
	// Labels associated with the node
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// Name of the node
	Name string `json:"name" url:"name"`
	// Regional summary of surrounding edges
	Summary string `json:"summary" url:"summary"`
	// UUID of the node
	UUID string `json:"uuid" url:"uuid"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GraphitiEntityNode) GetAttributes() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Attributes
}

func (g *GraphitiEntityNode) GetCreatedAt() string {
	if g == nil {
		return ""
	}
	return g.CreatedAt
}

func (g *GraphitiEntityNode) GetLabels() []string {
	if g == nil {
		return nil
	}
	return g.Labels
}

func (g *GraphitiEntityNode) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GraphitiEntityNode) GetSummary() string {
	if g == nil {
		return ""
	}
	return g.Summary
}

func (g *GraphitiEntityNode) GetUUID() string {
	if g == nil {
		return ""
	}
	return g.UUID
}

func (g *GraphitiEntityNode) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GraphitiEntityNode) UnmarshalJSON(data []byte) error {
	type unmarshaler GraphitiEntityNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GraphitiEntityNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GraphitiEntityNode) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ModelsGraphDataType string

const (
	ModelsGraphDataTypeText    ModelsGraphDataType = "text"
	ModelsGraphDataTypeJSON    ModelsGraphDataType = "json"
	ModelsGraphDataTypeMessage ModelsGraphDataType = "message"
)

func NewModelsGraphDataTypeFromString(s string) (ModelsGraphDataType, error) {
	switch s {
	case "text":
		return ModelsGraphDataTypeText, nil
	case "json":
		return ModelsGraphDataTypeJSON, nil
	case "message":
		return ModelsGraphDataTypeMessage, nil
	}
	var t ModelsGraphDataType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m ModelsGraphDataType) Ptr() *ModelsGraphDataType {
	return &m
}
