// This file was auto-generated by Fern from our API Definition.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/getzep/zep-go/v2/core"
)

type APIError struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *APIError) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIError) UnmarshalJSON(data []byte) error {
	type unmarshaler APIError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = APIError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AddedFact = interface{}

type ApidataDocument struct {
	Content    *string                `json:"content,omitempty" url:"content,omitempty"`
	CreatedAt  *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Embedding  []float64              `json:"embedding,omitempty" url:"embedding,omitempty"`
	IsEmbedded *bool                  `json:"is_embedded,omitempty" url:"is_embedded,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	UpdatedAt  *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UUID       *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApidataDocument) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocument(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocument) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataDocumentCollection struct {
	CreatedAt             *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	Description           *string                `json:"description,omitempty" url:"description,omitempty"`
	DocumentCount         *int                   `json:"document_count,omitempty" url:"document_count,omitempty"`
	DocumentEmbeddedCount *int                   `json:"document_embedded_count,omitempty" url:"document_embedded_count,omitempty"`
	EmbeddingDimensions   *int                   `json:"embedding_dimensions,omitempty" url:"embedding_dimensions,omitempty"`
	EmbeddingModelName    *string                `json:"embedding_model_name,omitempty" url:"embedding_model_name,omitempty"`
	IsAutoEmbedded        *bool                  `json:"is_auto_embedded,omitempty" url:"is_auto_embedded,omitempty"`
	IsIndexed             *bool                  `json:"is_indexed,omitempty" url:"is_indexed,omitempty"`
	IsNormalized          *bool                  `json:"is_normalized,omitempty" url:"is_normalized,omitempty"`
	Metadata              map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Name                  *string                `json:"name,omitempty" url:"name,omitempty"`
	UpdatedAt             *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UUID                  *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApidataDocumentCollection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocumentCollection) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocumentCollection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocumentCollection(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocumentCollection) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataDocumentSearchResponse struct {
	CurrentPage *int                        `json:"current_page,omitempty" url:"current_page,omitempty"`
	QueryVector []float64                   `json:"query_vector,omitempty" url:"query_vector,omitempty"`
	ResultCount *int                        `json:"result_count,omitempty" url:"result_count,omitempty"`
	Results     []*ApidataDocumentWithScore `json:"results,omitempty" url:"results,omitempty"`
	TotalPages  *int                        `json:"total_pages,omitempty" url:"total_pages,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApidataDocumentSearchResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocumentSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocumentSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocumentSearchResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocumentSearchResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataDocumentWithScore struct {
	Content    *string                `json:"content,omitempty" url:"content,omitempty"`
	CreatedAt  *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Embedding  []float64              `json:"embedding,omitempty" url:"embedding,omitempty"`
	IsEmbedded *bool                  `json:"is_embedded,omitempty" url:"is_embedded,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Score      *float64               `json:"score,omitempty" url:"score,omitempty"`
	UpdatedAt  *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UUID       *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApidataDocumentWithScore) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocumentWithScore) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocumentWithScore
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocumentWithScore(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocumentWithScore) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ClassifySessionRequest struct {
	// The classes to use for classification.
	Classes []string `json:"classes,omitempty" url:"classes,omitempty"`
	// Custom instruction to use for classification.
	Instruction *string `json:"instruction,omitempty" url:"instruction,omitempty"`
	// The number of session messages to consider for classification. Defaults to 4.
	LastN *int `json:"last_n,omitempty" url:"last_n,omitempty"`
	// The name of the classifier. Will be used to store the classification in session metadata if persist is True.
	Name string `json:"name" url:"name"`
	// Whether to persist the classification to session metadata. Defaults to True.
	Persist *bool `json:"persist,omitempty" url:"persist,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ClassifySessionRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClassifySessionRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ClassifySessionRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClassifySessionRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClassifySessionRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClassifySessionResponse = interface{}

type CommunityNode = interface{}

type CreateDocumentRequest struct {
	Content    string                 `json:"content" url:"content"`
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateDocumentRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDocumentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDocumentRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DocumentCollectionResponse = interface{}

type DocumentResponse = interface{}

type DocumentSearchResult = interface{}

type DocumentSearchResultPage = interface{}

type EndSessionResponse struct {
	Classification *SessionClassification `json:"classification,omitempty" url:"classification,omitempty"`
	Session        *Session               `json:"session,omitempty" url:"session,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EndSessionResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EndSessionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EndSessionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EndSessionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EndSessionResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EndSessionsResponse struct {
	Sessions []*Session `json:"sessions,omitempty" url:"sessions,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EndSessionsResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EndSessionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EndSessionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EndSessionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EndSessionsResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityEdge struct {
	// Creation time of the edge
	CreatedAt string `json:"created_at" url:"created_at"`
	// List of episode ids that reference these entity edges
	Episodes []string `json:"episodes,omitempty" url:"episodes,omitempty"`
	// Datetime of when the node was invalidated
	ExpiredAt *string `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	// Fact representing the edge and nodes that it connects
	Fact string `json:"fact" url:"fact"`
	// Datetime of when the fact stopped being true
	InvalidAt *string `json:"invalid_at,omitempty" url:"invalid_at,omitempty"`
	// Name of the edge, relation name
	Name string `json:"name" url:"name"`
	// UUID of the source node
	SourceNodeUUID string `json:"source_node_uuid" url:"source_node_uuid"`
	// UUID of the target node
	TargetNodeUUID string `json:"target_node_uuid" url:"target_node_uuid"`
	// UUID of the edge
	UUID string `json:"uuid" url:"uuid"`
	// Datetime of when the fact became true
	ValidAt *string `json:"valid_at,omitempty" url:"valid_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityEdge) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityEdge) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityEdge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityEdge(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityEdge) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityNode struct {
	// Creation time of the node
	CreatedAt string `json:"created_at" url:"created_at"`
	// Labels associated with the node
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// Name of the node
	Name string `json:"name" url:"name"`
	// Regional summary of surrounding edges
	Summary string `json:"summary" url:"summary"`
	// UUID of the node
	UUID string `json:"uuid" url:"uuid"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityNode) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityNode(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityNode) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Episode struct {
	Content           *string        `json:"content,omitempty" url:"content,omitempty"`
	CreatedAt         *string        `json:"created_at,omitempty" url:"created_at,omitempty"`
	Name              *string        `json:"name,omitempty" url:"name,omitempty"`
	Source            *GraphDataType `json:"source,omitempty" url:"source,omitempty"`
	SourceDescription *string        `json:"source_description,omitempty" url:"source_description,omitempty"`
	UUID              *string        `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *Episode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Episode) UnmarshalJSON(data []byte) error {
	type unmarshaler Episode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Episode(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Episode) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EpisodeResponse struct {
	Episodes []*Episode `json:"episodes,omitempty" url:"episodes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EpisodeResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EpisodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EpisodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EpisodeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EpisodeResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EpisodeType = interface{}

type Fact struct {
	CreatedAt      string   `json:"created_at" url:"created_at"`
	ExpiredAt      *string  `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	Fact           string   `json:"fact" url:"fact"`
	InvalidAt      *string  `json:"invalid_at,omitempty" url:"invalid_at,omitempty"`
	Name           *string  `json:"name,omitempty" url:"name,omitempty"`
	Rating         *float64 `json:"rating,omitempty" url:"rating,omitempty"`
	SourceNodeName *string  `json:"source_node_name,omitempty" url:"source_node_name,omitempty"`
	TargetNodeName *string  `json:"target_node_name,omitempty" url:"target_node_name,omitempty"`
	UUID           string   `json:"uuid" url:"uuid"`
	ValidAt        *string  `json:"valid_at,omitempty" url:"valid_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *Fact) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *Fact) UnmarshalJSON(data []byte) error {
	type unmarshaler Fact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Fact(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *Fact) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FactRatingExamples struct {
	High   *string `json:"high,omitempty" url:"high,omitempty"`
	Low    *string `json:"low,omitempty" url:"low,omitempty"`
	Medium *string `json:"medium,omitempty" url:"medium,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FactRatingExamples) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FactRatingExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler FactRatingExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FactRatingExamples(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FactRatingExamples) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FactRatingInstruction struct {
	// Examples is a list of examples that demonstrate how facts might be rated based on your instruction. You should provide
	// an example of a highly rated example, a low rated example, and a medium (or in between example). For example, if you are rating
	// based on relevance to a trip planning application, your examples might be:
	// High: "Joe's dream vacation is Bali"
	// Medium: "Joe has a fear of flying",
	// Low: "Joe's favorite food is Japanese",
	Examples *FactRatingExamples `json:"examples,omitempty" url:"examples,omitempty"`
	// A string describing how to rate facts as they apply to your application. A trip planning application may
	// use something like "relevancy to planning a trip, the user's preferences when traveling,
	// or the user's travel history."
	Instruction *string `json:"instruction,omitempty" url:"instruction,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FactRatingInstruction) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FactRatingInstruction) UnmarshalJSON(data []byte) error {
	type unmarshaler FactRatingInstruction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FactRatingInstruction(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FactRatingInstruction) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FactResponse struct {
	Fact *Fact `json:"fact,omitempty" url:"fact,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FactResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FactResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FactResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FactResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FactResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FactsResponse struct {
	Facts []*Fact `json:"facts,omitempty" url:"facts,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FactsResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FactsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FactsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FactsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FactsResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GraphDataType string

const (
	GraphDataTypeText    GraphDataType = "text"
	GraphDataTypeJSON    GraphDataType = "json"
	GraphDataTypeMessage GraphDataType = "message"
)

func NewGraphDataTypeFromString(s string) (GraphDataType, error) {
	switch s {
	case "text":
		return GraphDataTypeText, nil
	case "json":
		return GraphDataTypeJSON, nil
	case "message":
		return GraphDataTypeMessage, nil
	}
	var t GraphDataType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GraphDataType) Ptr() *GraphDataType {
	return &g
}

type GraphSearchResults struct {
	Edges []*EntityEdge `json:"edges,omitempty" url:"edges,omitempty"`
	Nodes []*EntityNode `json:"nodes,omitempty" url:"nodes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GraphSearchResults) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GraphSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler GraphSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GraphSearchResults(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GraphSearchResults) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GraphSearchScope string

const (
	GraphSearchScopeEdges GraphSearchScope = "edges"
	GraphSearchScopeNodes GraphSearchScope = "nodes"
)

func NewGraphSearchScopeFromString(s string) (GraphSearchScope, error) {
	switch s {
	case "edges":
		return GraphSearchScopeEdges, nil
	case "nodes":
		return GraphSearchScopeNodes, nil
	}
	var t GraphSearchScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GraphSearchScope) Ptr() *GraphSearchScope {
	return &g
}

type Group struct {
	CreatedAt   *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	ExternalID  *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	ID          *int    `json:"id,omitempty" url:"id,omitempty"`
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	ProjectUUID *string `json:"project_uuid,omitempty" url:"project_uuid,omitempty"`
	UUID        *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *Group) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *Group) UnmarshalJSON(data []byte) error {
	type unmarshaler Group
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = Group(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *Group) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Memory struct {
	// Most recent list of facts derived from the session. (cloud only)
	// Deprecated: Facts will be deprecated in future releases and relevant_facts should be used instead.
	Facts []string `json:"facts,omitempty" url:"facts,omitempty"`
	// A list of message objects, where each message contains a role and content. Only last_n messages will be returned
	Messages []*Message `json:"messages,omitempty" url:"messages,omitempty"`
	// A dictionary containing metadata associated with the memory.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Most relevant facts to the recent messages in the session.
	RelevantFacts []*Fact `json:"relevant_facts,omitempty" url:"relevant_facts,omitempty"`
	// The most recent summary before last nth message. (cloud only)
	Summary *Summary `json:"summary,omitempty" url:"summary,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *Memory) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Memory) UnmarshalJSON(data []byte) error {
	type unmarshaler Memory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Memory(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *Memory) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MemorySearchResult struct {
	Message  *Message               `json:"message,omitempty" url:"message,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Score    *float64               `json:"score,omitempty" url:"score,omitempty"`
	Summary  *Summary               `json:"summary,omitempty" url:"summary,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MemorySearchResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MemorySearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler MemorySearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MemorySearchResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MemorySearchResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MemoryType string

const (
	MemoryTypePerpetual        MemoryType = "perpetual"
	MemoryTypeSummaryRetriever MemoryType = "summary_retriever"
	MemoryTypeMessageWindow    MemoryType = "message_window"
)

func NewMemoryTypeFromString(s string) (MemoryType, error) {
	switch s {
	case "perpetual":
		return MemoryTypePerpetual, nil
	case "summary_retriever":
		return MemoryTypeSummaryRetriever, nil
	case "message_window":
		return MemoryTypeMessageWindow, nil
	}
	var t MemoryType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MemoryType) Ptr() *MemoryType {
	return &m
}

type Message struct {
	// The content of the message.
	Content string `json:"content" url:"content"`
	// The timestamp of when the message was created.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The metadata associated with the message.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// The role of the sender of the message (e.g., "user", "assistant").
	Role *string `json:"role,omitempty" url:"role,omitempty"`
	// The type of the role (e.g., "user", "system").
	RoleType RoleType `json:"role_type" url:"role_type"`
	// The number of tokens in the message.
	TokenCount *int `json:"token_count,omitempty" url:"token_count,omitempty"`
	// The timestamp of when the message was last updated.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The unique identifier of the message.
	UUID *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *Message) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Message) UnmarshalJSON(data []byte) error {
	type unmarshaler Message
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Message(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *Message) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageListResponse struct {
	// A list of message objects.
	Messages []*Message `json:"messages,omitempty" url:"messages,omitempty"`
	// The number of messages returned.
	RowCount *int `json:"row_count,omitempty" url:"row_count,omitempty"`
	// The total number of messages.
	TotalCount *int `json:"total_count,omitempty" url:"total_count,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MessageListResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageListResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageListResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type NewFact struct {
	Fact *string `json:"fact,omitempty" url:"fact,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NewFact) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NewFact) UnmarshalJSON(data []byte) error {
	type unmarshaler NewFact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NewFact(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NewFact) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Question struct {
	Question *string `json:"question,omitempty" url:"question,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *Question) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *Question) UnmarshalJSON(data []byte) error {
	type unmarshaler Question
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = Question(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = json.RawMessage(data)
	return nil
}

func (q *Question) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type Reranker string

const (
	RerankerRrf             Reranker = "rrf"
	RerankerMmr             Reranker = "mmr"
	RerankerNodeDistance    Reranker = "node_distance"
	RerankerEpisodeMentions Reranker = "episode_mentions"
)

func NewRerankerFromString(s string) (Reranker, error) {
	switch s {
	case "rrf":
		return RerankerRrf, nil
	case "mmr":
		return RerankerMmr, nil
	case "node_distance":
		return RerankerNodeDistance, nil
	case "episode_mentions":
		return RerankerEpisodeMentions, nil
	}
	var t Reranker
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Reranker) Ptr() *Reranker {
	return &r
}

type RoleType string

const (
	RoleTypeNoRole        RoleType = "norole"
	RoleTypeSystemRole    RoleType = "system"
	RoleTypeAssistantRole RoleType = "assistant"
	RoleTypeUserRole      RoleType = "user"
	RoleTypeFunctionRole  RoleType = "function"
	RoleTypeToolRole      RoleType = "tool"
)

func NewRoleTypeFromString(s string) (RoleType, error) {
	switch s {
	case "norole":
		return RoleTypeNoRole, nil
	case "system":
		return RoleTypeSystemRole, nil
	case "assistant":
		return RoleTypeAssistantRole, nil
	case "user":
		return RoleTypeUserRole, nil
	case "function":
		return RoleTypeFunctionRole, nil
	case "tool":
		return RoleTypeToolRole, nil
	}
	var t RoleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoleType) Ptr() *RoleType {
	return &r
}

type SearchScope string

const (
	SearchScopeMessages SearchScope = "messages"
	SearchScopeSummary  SearchScope = "summary"
	SearchScopeFacts    SearchScope = "facts"
)

func NewSearchScopeFromString(s string) (SearchScope, error) {
	switch s {
	case "messages":
		return SearchScopeMessages, nil
	case "summary":
		return SearchScopeSummary, nil
	case "facts":
		return SearchScopeFacts, nil
	}
	var t SearchScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchScope) Ptr() *SearchScope {
	return &s
}

type SearchType string

const (
	SearchTypeSimilarity SearchType = "similarity"
	SearchTypeMmr        SearchType = "mmr"
)

func NewSearchTypeFromString(s string) (SearchType, error) {
	switch s {
	case "similarity":
		return SearchTypeSimilarity, nil
	case "mmr":
		return SearchTypeMmr, nil
	}
	var t SearchType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchType) Ptr() *SearchType {
	return &s
}

type Session struct {
	Classifications       map[string]string             `json:"classifications,omitempty" url:"classifications,omitempty"`
	CreatedAt             *string                       `json:"created_at,omitempty" url:"created_at,omitempty"`
	DeletedAt             *string                       `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	EndedAt               *string                       `json:"ended_at,omitempty" url:"ended_at,omitempty"`
	FactRatingInstruction *SessionFactRatingInstruction `json:"fact_rating_instruction,omitempty" url:"fact_rating_instruction,omitempty"`
	Facts                 []string                      `json:"facts,omitempty" url:"facts,omitempty"`
	ID                    *int                          `json:"id,omitempty" url:"id,omitempty"`
	Metadata              map[string]interface{}        `json:"metadata,omitempty" url:"metadata,omitempty"`
	ProjectUUID           *string                       `json:"project_uuid,omitempty" url:"project_uuid,omitempty"`
	SessionID             *string                       `json:"session_id,omitempty" url:"session_id,omitempty"`
	UpdatedAt             *string                       `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Must be a pointer to allow for null values
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	UUID   *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Session) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Session) UnmarshalJSON(data []byte) error {
	type unmarshaler Session
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Session(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Session) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionClassification struct {
	Class *string `json:"class,omitempty" url:"class,omitempty"`
	Label *string `json:"label,omitempty" url:"label,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SessionClassification) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionClassification) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionClassification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionClassification(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionClassification) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionFactRatingExamples struct {
	High   *string `json:"high,omitempty" url:"high,omitempty"`
	Low    *string `json:"low,omitempty" url:"low,omitempty"`
	Medium *string `json:"medium,omitempty" url:"medium,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SessionFactRatingExamples) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionFactRatingExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionFactRatingExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionFactRatingExamples(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionFactRatingExamples) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionFactRatingInstruction struct {
	// Examples is a list of examples that demonstrate how facts might be rated based on your instruction. You should provide
	// an example of a highly rated example, a low rated example, and a medium (or in between example). For example, if you are rating
	// based on relevance to a trip planning application, your examples might be:
	// High: "Joe's dream vacation is Bali"
	// Medium: "Joe has a fear of flying",
	// Low: "Joe's favorite food is Japanese",
	Examples *SessionFactRatingExamples `json:"examples,omitempty" url:"examples,omitempty"`
	// A string describing how to rate facts as they apply to your application. A trip planning application may
	// use something like "relevancy to planning a trip, the user's preferences when traveling,
	// or the user's travel history."
	Instruction *string `json:"instruction,omitempty" url:"instruction,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SessionFactRatingInstruction) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionFactRatingInstruction) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionFactRatingInstruction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionFactRatingInstruction(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionFactRatingInstruction) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionListResponse struct {
	ResponseCount *int       `json:"response_count,omitempty" url:"response_count,omitempty"`
	Sessions      []*Session `json:"sessions,omitempty" url:"sessions,omitempty"`
	TotalCount    *int       `json:"total_count,omitempty" url:"total_count,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SessionListResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionListResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionListResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionSearchResponse struct {
	Results []*SessionSearchResult `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SessionSearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionSearchResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionSearchResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionSearchResult struct {
	Fact      *Fact    `json:"fact,omitempty" url:"fact,omitempty"`
	Message   *Message `json:"message,omitempty" url:"message,omitempty"`
	Score     *float64 `json:"score,omitempty" url:"score,omitempty"`
	SessionID *string  `json:"session_id,omitempty" url:"session_id,omitempty"`
	Summary   *Summary `json:"summary,omitempty" url:"summary,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SessionSearchResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionSearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionSearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionSearchResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionSearchResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SuccessResponse struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SuccessResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SuccessResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SuccessResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SuccessResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SuccessResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Summary struct {
	// The content of the summary.
	Content *string `json:"content,omitempty" url:"content,omitempty"`
	// The timestamp of when the summary was created.
	CreatedAt           *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	Metadata            map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	RelatedMessageUUIDs []string               `json:"related_message_uuids,omitempty" url:"related_message_uuids,omitempty"`
	// The number of tokens in the summary.
	TokenCount *int `json:"token_count,omitempty" url:"token_count,omitempty"`
	// The unique identifier of the summary.
	UUID *string `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Summary) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Summary) UnmarshalJSON(data []byte) error {
	type unmarshaler Summary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Summary(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Summary) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SummaryListResponse struct {
	RowCount   *int       `json:"row_count,omitempty" url:"row_count,omitempty"`
	Summaries  []*Summary `json:"summaries,omitempty" url:"summaries,omitempty"`
	TotalCount *int       `json:"total_count,omitempty" url:"total_count,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SummaryListResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SummaryListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SummaryListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SummaryListResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SummaryListResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateDocumentListRequest struct {
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	UUID       string                 `json:"uuid" url:"uuid"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateDocumentListRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateDocumentListRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateDocumentListRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateDocumentListRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateDocumentListRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateGroupRequest = interface{}

type User struct {
	CreatedAt    *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	DeletedAt    *string                `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email        *string                `json:"email,omitempty" url:"email,omitempty"`
	FirstName    *string                `json:"first_name,omitempty" url:"first_name,omitempty"`
	ID           *int                   `json:"id,omitempty" url:"id,omitempty"`
	LastName     *string                `json:"last_name,omitempty" url:"last_name,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	ProjectUUID  *string                `json:"project_uuid,omitempty" url:"project_uuid,omitempty"`
	SessionCount *int                   `json:"session_count,omitempty" url:"session_count,omitempty"`
	UpdatedAt    *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UserID       *string                `json:"user_id,omitempty" url:"user_id,omitempty"`
	UUID         *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserListResponse struct {
	RowCount   *int    `json:"row_count,omitempty" url:"row_count,omitempty"`
	TotalCount *int    `json:"total_count,omitempty" url:"total_count,omitempty"`
	Users      []*User `json:"users,omitempty" url:"users,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UserListResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserListResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserListResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
