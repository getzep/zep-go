// This file was auto-generated by Fern from our API Definition.

package zep

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/getzep/zep-go/v2/internal"
)

type CreateDocumentCollectionRequest struct {
	Description *string                `json:"description,omitempty" url:"-"`
	Metadata    map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type GetDocumentListRequest struct {
	DocumentIDs []string `json:"document_ids,omitempty" url:"-"`
	UUIDs       []string `json:"uuids,omitempty" url:"-"`
}

type DocumentSearchPayload struct {
	// Limit the number of returned documents
	Limit *int `json:"-" url:"limit,omitempty"`
	// Document metadata to filter on.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
	MinScore *float64               `json:"min_score,omitempty" url:"-"`
	// The lambda parameter for the MMR Reranking Algorithm.
	MmrLambda *float64 `json:"mmr_lambda,omitempty" url:"-"`
	// The type of search to perform. Defaults to "similarity". Must be one of "similarity" or "mmr".
	SearchType *SearchType `json:"search_type,omitempty" url:"-"`
	// The search text.
	Text *string `json:"text,omitempty" url:"-"`
}

type ApidataDocument struct {
	Content    *string                `json:"content,omitempty" url:"content,omitempty"`
	CreatedAt  *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Embedding  []float64              `json:"embedding,omitempty" url:"embedding,omitempty"`
	IsEmbedded *bool                  `json:"is_embedded,omitempty" url:"is_embedded,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	UpdatedAt  *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UUID       *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataDocument) GetContent() *string {
	if a == nil {
		return nil
	}
	return a.Content
}

func (a *ApidataDocument) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApidataDocument) GetDocumentID() *string {
	if a == nil {
		return nil
	}
	return a.DocumentID
}

func (a *ApidataDocument) GetEmbedding() []float64 {
	if a == nil {
		return nil
	}
	return a.Embedding
}

func (a *ApidataDocument) GetIsEmbedded() *bool {
	if a == nil {
		return nil
	}
	return a.IsEmbedded
}

func (a *ApidataDocument) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApidataDocument) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ApidataDocument) GetUUID() *string {
	if a == nil {
		return nil
	}
	return a.UUID
}

func (a *ApidataDocument) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocument(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocument) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataDocumentCollection struct {
	CreatedAt             *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	Description           *string                `json:"description,omitempty" url:"description,omitempty"`
	DocumentCount         *int                   `json:"document_count,omitempty" url:"document_count,omitempty"`
	DocumentEmbeddedCount *int                   `json:"document_embedded_count,omitempty" url:"document_embedded_count,omitempty"`
	EmbeddingDimensions   *int                   `json:"embedding_dimensions,omitempty" url:"embedding_dimensions,omitempty"`
	EmbeddingModelName    *string                `json:"embedding_model_name,omitempty" url:"embedding_model_name,omitempty"`
	IsAutoEmbedded        *bool                  `json:"is_auto_embedded,omitempty" url:"is_auto_embedded,omitempty"`
	IsIndexed             *bool                  `json:"is_indexed,omitempty" url:"is_indexed,omitempty"`
	IsNormalized          *bool                  `json:"is_normalized,omitempty" url:"is_normalized,omitempty"`
	Metadata              map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Name                  *string                `json:"name,omitempty" url:"name,omitempty"`
	UpdatedAt             *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UUID                  *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataDocumentCollection) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApidataDocumentCollection) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *ApidataDocumentCollection) GetDocumentCount() *int {
	if a == nil {
		return nil
	}
	return a.DocumentCount
}

func (a *ApidataDocumentCollection) GetDocumentEmbeddedCount() *int {
	if a == nil {
		return nil
	}
	return a.DocumentEmbeddedCount
}

func (a *ApidataDocumentCollection) GetEmbeddingDimensions() *int {
	if a == nil {
		return nil
	}
	return a.EmbeddingDimensions
}

func (a *ApidataDocumentCollection) GetEmbeddingModelName() *string {
	if a == nil {
		return nil
	}
	return a.EmbeddingModelName
}

func (a *ApidataDocumentCollection) GetIsAutoEmbedded() *bool {
	if a == nil {
		return nil
	}
	return a.IsAutoEmbedded
}

func (a *ApidataDocumentCollection) GetIsIndexed() *bool {
	if a == nil {
		return nil
	}
	return a.IsIndexed
}

func (a *ApidataDocumentCollection) GetIsNormalized() *bool {
	if a == nil {
		return nil
	}
	return a.IsNormalized
}

func (a *ApidataDocumentCollection) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApidataDocumentCollection) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ApidataDocumentCollection) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ApidataDocumentCollection) GetUUID() *string {
	if a == nil {
		return nil
	}
	return a.UUID
}

func (a *ApidataDocumentCollection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocumentCollection) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocumentCollection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocumentCollection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocumentCollection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataDocumentSearchResponse struct {
	CurrentPage *int                        `json:"current_page,omitempty" url:"current_page,omitempty"`
	QueryVector []float64                   `json:"query_vector,omitempty" url:"query_vector,omitempty"`
	ResultCount *int                        `json:"result_count,omitempty" url:"result_count,omitempty"`
	Results     []*ApidataDocumentWithScore `json:"results,omitempty" url:"results,omitempty"`
	TotalPages  *int                        `json:"total_pages,omitempty" url:"total_pages,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataDocumentSearchResponse) GetCurrentPage() *int {
	if a == nil {
		return nil
	}
	return a.CurrentPage
}

func (a *ApidataDocumentSearchResponse) GetQueryVector() []float64 {
	if a == nil {
		return nil
	}
	return a.QueryVector
}

func (a *ApidataDocumentSearchResponse) GetResultCount() *int {
	if a == nil {
		return nil
	}
	return a.ResultCount
}

func (a *ApidataDocumentSearchResponse) GetResults() []*ApidataDocumentWithScore {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *ApidataDocumentSearchResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *ApidataDocumentSearchResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocumentSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocumentSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocumentSearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocumentSearchResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApidataDocumentWithScore struct {
	Content    *string                `json:"content,omitempty" url:"content,omitempty"`
	CreatedAt  *string                `json:"created_at,omitempty" url:"created_at,omitempty"`
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Embedding  []float64              `json:"embedding,omitempty" url:"embedding,omitempty"`
	IsEmbedded *bool                  `json:"is_embedded,omitempty" url:"is_embedded,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Score      *float64               `json:"score,omitempty" url:"score,omitempty"`
	UpdatedAt  *string                `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UUID       *string                `json:"uuid,omitempty" url:"uuid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApidataDocumentWithScore) GetContent() *string {
	if a == nil {
		return nil
	}
	return a.Content
}

func (a *ApidataDocumentWithScore) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApidataDocumentWithScore) GetDocumentID() *string {
	if a == nil {
		return nil
	}
	return a.DocumentID
}

func (a *ApidataDocumentWithScore) GetEmbedding() []float64 {
	if a == nil {
		return nil
	}
	return a.Embedding
}

func (a *ApidataDocumentWithScore) GetIsEmbedded() *bool {
	if a == nil {
		return nil
	}
	return a.IsEmbedded
}

func (a *ApidataDocumentWithScore) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApidataDocumentWithScore) GetScore() *float64 {
	if a == nil {
		return nil
	}
	return a.Score
}

func (a *ApidataDocumentWithScore) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ApidataDocumentWithScore) GetUUID() *string {
	if a == nil {
		return nil
	}
	return a.UUID
}

func (a *ApidataDocumentWithScore) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApidataDocumentWithScore) UnmarshalJSON(data []byte) error {
	type unmarshaler ApidataDocumentWithScore
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApidataDocumentWithScore(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApidataDocumentWithScore) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateDocumentRequest struct {
	Content    string                 `json:"content" url:"content"`
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateDocumentRequest) GetContent() string {
	if c == nil {
		return ""
	}
	return c.Content
}

func (c *CreateDocumentRequest) GetDocumentID() *string {
	if c == nil {
		return nil
	}
	return c.DocumentID
}

func (c *CreateDocumentRequest) GetMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *CreateDocumentRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDocumentRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDocumentRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type UpdateDocumentListRequest struct {
	DocumentID *string                `json:"document_id,omitempty" url:"document_id,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	UUID       string                 `json:"uuid" url:"uuid"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateDocumentListRequest) GetDocumentID() *string {
	if u == nil {
		return nil
	}
	return u.DocumentID
}

func (u *UpdateDocumentListRequest) GetMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Metadata
}

func (u *UpdateDocumentListRequest) GetUUID() string {
	if u == nil {
		return ""
	}
	return u.UUID
}

func (u *UpdateDocumentListRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateDocumentListRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateDocumentListRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateDocumentListRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateDocumentListRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateDocumentCollectionRequest struct {
	Description *string                `json:"description,omitempty" url:"-"`
	Metadata    map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type UpdateDocumentRequest struct {
	DocumentID *string                `json:"document_id,omitempty" url:"-"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"-"`
}
